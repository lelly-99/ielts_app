

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
       
            html, body {
            height: 100%;
            margin: 0;
            background-color: #121212;
            color: #e0e0e0;
        }
        .app-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            position: relative;
        }
        .part-display {
            padding: 10px;
            text-align: center;
            background-color: #1e1e1e;
            color: #888;
        }
        .chat-container {
            flex-grow: 1;
            overflow-y: auto;
            padding: 15px;
        }
        .message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 10px;
            clear: both;
        }
     .system-message {
    background-color: #2c2c2c;
    color: #d4d8d9;
    align-self: flex-start;
    margin-right: auto;
    text-align: left;
    max-width: 80%;
    width: fit-content;
}

.user-message {
    background-color: #2c2e39;
    color: #d4d8d9;
    align-self: flex-end;
    margin-left: auto;
    text-align: right;
    max-width: 80%;
    width: fit-content;
}
        .typing-indicator {
            color: #2c2c2c;
            padding: 10px;
            border-radius: 10px;
            display: none;
            margin-bottom: 10px;
        }
        .input-area {
            padding: 10px;
            position: sticky;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 1000;
        }
        #answer-input {
            background-color: #212020;
            color: #e0e0e0;
            border-color: #444;
        }
        #submit-btn {
            background-color: #2d2d2d;
            color: white;
        }
        #submit-btn:hover {
            background-color: #4e5165;
        }
    
        .chat-container::-webkit-scrollbar {
            width: 6px;
        }
        .chat-container::-webkit-scrollbar-track {
            background: #1e1e1e;
        }
        .chat-container::-webkit-scrollbar-thumb {
            background: #3f51b5;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="part-display">
            Practice Mode
        </div>

        <div id="chat-container" class="chat-container">
            <div class="message system-message" id="initial-question">
                {{{initialQuestion}}}
            </div>
        </div>

        <div id="typing-indicator" class="typing-indicator text-center">
            Examiner is typing...
        </div>

        <div class="input-area">
            <form id="answer-form" class="d-flex">
                <input type="text" 
                       id="answer-input" 
                       class="form-control me-2" 
                       placeholder="Type your answer here" 
                       required>
                <button id="recordButton" class="btn record-btn" type="button">
                    <i class="bi bi-mic"></i>
                </button>
                <button type="submit" 
                        id="submit-btn" 
                        class="btn"> 
                    <i class="bi bi-send-fill"></i>
                </button>
            </form>
        </div>
    </div>

    <input type="hidden" id="current-question" value="{{question.question}}">

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
document.addEventListener('DOMContentLoaded', () => {
    const chatContainer = document.getElementById('chat-container');
    const answerForm = document.getElementById('answer-form');
    const answerInput = document.getElementById('answer-input');
    const typingIndicator = document.getElementById('typing-indicator');
    const currentQuestionInput = document.getElementById('current-question');

    let currentQuestion = currentQuestionInput.value;

    answerForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const response = answerInput.value.trim();

        typingIndicator.style.display = 'block';

        try {
            const apiResponse = await fetch('/submit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    question: currentQuestion,
                    response: response
                })
            });

            const data = await apiResponse.json();

            // Hide typing indicator
            typingIndicator.style.display = 'none';

            // Add user message
            const userMessageEl = document.createElement('div');
            userMessageEl.classList.add('message', 'user-message');
            userMessageEl.textContent = response;
            chatContainer.appendChild(userMessageEl);

            // Add AI response based on evaluation
            const aiMessageEl = document.createElement('div');
            aiMessageEl.classList.add('message', 'system-message');
            
            // Combine feedback and next question in one message
            let messageContent = '';

            // Always include feedback
            if (data.status === 'pass') {
                messageContent += `<strong>Feedback:</strong><br>${data.message}<br><br>`;
            } else if (data.status === 'review') {
                messageContent += `
                    <strong>Corrections:</strong><br>
                    ${data.corrections}<br><br>
                    <strong>Suggestions:</strong><br>
                    ${data.suggestions}<br><br>
                    <strong>Improved Version:</strong><br>
                    ${data.improvedVersion}<br><br>
                `;
            } else {
                messageContent += `<strong>Feedback:</strong><br>${data.message}<br><br>`;
            }

            if (data.nextQuestion) {
                messageContent += `<strong>Next Question:</strong><br>${data.nextQuestion}`;
                
                currentQuestion = data.nextQuestion;
                currentQuestionInput.value = currentQuestion;
            }

            aiMessageEl.innerHTML = messageContent;
            chatContainer.appendChild(aiMessageEl);

            //input only clears when Ai Response comes, fix this
            answerInput.value = '';

            chatContainer.scrollTop = chatContainer.scrollHeight;
        } catch (error) {
            console.error('Submission error:', error);
            typingIndicator.style.display = 'none';
        }
    });
});
    </script>
</body>
</html>